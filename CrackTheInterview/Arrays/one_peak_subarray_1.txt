#include <iostream>
using namespace std;

void fill_left_and_right_arrays(int arr[], int N, int left[], int right[])
{
	left[0] = 0;
	int last_increasing_num = 0;
	for (int i = 1; i < N; i++)
	{
		if (arr[i] > arr[i - 1])
			last_increasing_num = i;
		left[i] = last_increasing_num;
	}

	right[N - 1] = N - 1;
	int first_decreasing_num = N - 1;
	for (int i = N - 2; i >= 0; i--)
	{
		if (arr[i] > arr[i + 1])
			first_decreasing_num = i;
		right[i] = first_decreasing_num;
	}
	return;
}

bool check_one_peak_subarray(int arr[], int left[], int right[], int start_index, int end_index)
{
	return (right[start_index] >= left[end_index]);
}

int main()
{
	int n, q;
	cin >> n;
	int A[n];
	for (int i = 0; i < n; i++)
	{
		cin >> A[i];
	}

	cin >> q;
	int start_index, end_index;

	int left[n], right[n];
	fill_left_and_right_arrays(A, n, left, right);

	while (q--)
	{
		cin >> start_index >> end_index;
		if (q > 0)
			cout << check_one_peak_subarray(A, left, right, start_index, end_index) << "\n";
		else
			cout << check_one_peak_subarray(A, left, right, start_index, end_index);
	}
	return 0;
}
